// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PostAppsByAppIdSessionsNewData, PostAppsByAppIdSessionsNewResponses, PostAppsByAppIdSessionsBySessionIdTracksNewData, PostAppsByAppIdSessionsBySessionIdTracksNewResponses, PutAppsByAppIdSessionsBySessionIdRenegotiateData, PutAppsByAppIdSessionsBySessionIdRenegotiateResponses, PutAppsByAppIdSessionsBySessionIdTracksCloseData, PutAppsByAppIdSessionsBySessionIdTracksCloseResponses, PutAppsByAppIdSessionsBySessionIdTracksUpdateData, PutAppsByAppIdSessionsBySessionIdTracksUpdateResponses, GetAppsByAppIdSessionsBySessionIdData, GetAppsByAppIdSessionsBySessionIdResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create a new PeerConnection
 */
export const postAppsByAppIdSessionsNew = <ThrowOnError extends boolean = false>(options: Options<PostAppsByAppIdSessionsNewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAppsByAppIdSessionsNewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{appId}/sessions/new',
        ...options
    });
};

/**
 * Solve the given track object(s) and add the track(s) to the WebRTC session
 */
export const postAppsByAppIdSessionsBySessionIdTracksNew = <ThrowOnError extends boolean = false>(options: Options<PostAppsByAppIdSessionsBySessionIdTracksNewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAppsByAppIdSessionsBySessionIdTracksNewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{appId}/sessions/{sessionId}/tracks/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * When a previous response has requiresImmediateRenegotiation, you must renegotiate
 */
export const putAppsByAppIdSessionsBySessionIdRenegotiate = <ThrowOnError extends boolean = false>(options: Options<PutAppsByAppIdSessionsBySessionIdRenegotiateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAppsByAppIdSessionsBySessionIdRenegotiateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{appId}/sessions/{sessionId}/renegotiate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Close a local or remote track
 */
export const putAppsByAppIdSessionsBySessionIdTracksClose = <ThrowOnError extends boolean = false>(options: Options<PutAppsByAppIdSessionsBySessionIdTracksCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAppsByAppIdSessionsBySessionIdTracksCloseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{appId}/sessions/{sessionId}/tracks/close',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change tracks by reusing existing transceivers
 */
export const putAppsByAppIdSessionsBySessionIdTracksUpdate = <ThrowOnError extends boolean = false>(options: Options<PutAppsByAppIdSessionsBySessionIdTracksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutAppsByAppIdSessionsBySessionIdTracksUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{appId}/sessions/{sessionId}/tracks/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return the list of tracks associated to the session
 */
export const getAppsByAppIdSessionsBySessionId = <ThrowOnError extends boolean = false>(options: Options<GetAppsByAppIdSessionsBySessionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAppsByAppIdSessionsBySessionIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/apps/{appId}/sessions/{sessionId}',
        ...options
    });
};